#: src/SUMMARY.md:3
msgid "Introduction"
msgstr "Introduction"

#: src/SUMMARY.md:5
msgid "Articles"
msgstr "Articles"

#: src/SUMMARY.md:6 src/lazy-loading/lazy_loading.md:1
msgid "Lazy Loading"
msgstr "Chargement différé"

#: src/SUMMARY.md:7 src/lazy-loading/lazy_loading_module.md:1
msgid "How to Lazy load Module ?"
msgstr "Comment charger un module de manière différée ?"

#: src/SUMMARY.md:8 src/lazy-loading/lazy_loading_standalone_component.md:1
msgid "How to Lazy load Standalone Components"
msgstr "Comment charger un composant Standalone de manière différée ?"

#: src/SUMMARY.md:9 src/lazy-loading/lazy_loading_service.md:1
msgid "How to Lazy load Service"
msgstr "Comment charger un service de manière différée ?"

#: src/SUMMARY.md:10
msgid "Preloading Strategy "
msgstr "Stratégie de préchargement"

#: src/SUMMARY.md:11 src/interpolation/index.md:1
msgid "Interpolation"
msgstr "Interpolation"

#: src/SUMMARY.md:12 src/interpolation/how-to-bind.md:1
msgid "How to bind  ?"
msgstr "Comment lier ?"

#: src/SUMMARY.md:13
msgid "How to customize Component Interpolation"
msgstr "Comment personnaliser l'interpolation d'un composant ?"

#: src/SUMMARY.md:14
msgid "Renderer"
msgstr ""

#: src/SUMMARY.md:16 src/renderer/how-to-create_comment.md:1
msgid "How to create comment ?"
msgstr ""

#: src/SUMMARY.md:17 src/ng-template/index.md:1
msgid "How to use ng-template ?"
msgstr ""

#: src/SUMMARY.md:18
msgid "How to use ng-template with-ngIf ?"
msgstr ""

#: src/SUMMARY.md:19 src/ng-template/ng-template-outlet.md:1
msgid "How to use ngTemplateOutlet ?"
msgstr ""

#: src/SUMMARY.md:20 src/ng-template/ng-template-outlet-with-context.md:1
msgid "How to use ngTemplateOutlet with context ?"
msgstr ""

#: src/SUMMARY.md:21
msgid ""
"How to use ng-template with ViewChild/ViewChildren and ContentChild/"
"ContentChildren ?"
msgstr ""

#: src/SUMMARY.md:22 src/awesome-angular/awesome_angular.md:1
msgid "Awesome Angular"
msgstr ""

#: src/SUMMARY.md:26 src/contributors.md:1
msgid "Contributors"
msgstr ""

#: src/index.md:1
msgid "Angular CookBook"
msgstr ""

#: src/index.md:2
msgid "![Angular CookBook ](./introduction/book-cover.png)"
msgstr ""

#: src/index.md:4
msgid "Angular Cookbook - How to do things with Angular"
msgstr ""

#: src/index.md:6
msgid "This is a book about doing things with Angular."
msgstr ""

#: src/index.md:8
msgid "It takes the form of \"How to\" articles."
msgstr ""

#: src/index.md:10
msgid "Everyone can participate !"
msgstr ""

#: src/index.md:12
msgid "Source code is store on [Github]()"
msgstr ""

#: src/index.md:14
msgid ""
"Build with  by [Pierre Ndlec](https://www.linkedin.com/in/pierrenedelec-"
"expert) "
msgstr ""

#: src/lazy-loading/lazy_loading.md:3
msgid "![Lazy Loading ](../images/lazy-loading.png)"
msgstr ""

#: src/lazy-loading/lazy_loading.md:6
msgid "[Lazy Loading Module](./lazy_loading_module.md)"
msgstr ""

#: src/lazy-loading/lazy_loading.md:8
msgid ""
"[Lazy Loading Standalone Components ( NG 14+) ](./"
"lazy_loading_standalone_component.md)"
msgstr ""

#: src/lazy-loading/lazy_loading.md:10
msgid "Read about [mdBook](mdBook.md)"
msgstr ""

#: src/lazy-loading/lazy_loading_module.md:4
msgid ""
"```typescript\n"
"RouterModule.forRoot([\n"
"    {\n"
"        path: 'lazy-loading-path',\n"
"        loadChildren: () => import('./lazy-loading.module.ts')\n"
"        .then((m) => m.LazyLoadingModule)\n"
"    }\n"
"])\n"
"\n"
"```"
msgstr ""

#: src/lazy-loading/lazy_loading_module.md:14
msgid "Why/When to Lazy load Module ?"
msgstr ""

#: src/lazy-loading/lazy_loading_module.md:16
msgid ""
"You Application might contains differents features which are related to "
"specific part of your application. "
msgstr ""

#: src/lazy-loading/lazy_loading_module.md:19
msgid ""
"Lazy loading module help you to add features to your application without "
"having to increase runtime performance."
msgstr ""

#: src/lazy-loading/lazy_loading_module.md:21
msgid "Related Topics :"
msgstr ""

#: src/lazy-loading/lazy_loading_module.md:24
msgid "[Preloading Strategy ](./preloading_strategy.md)"
msgstr ""

#: src/lazy-loading/preloading_strategy.md:1
msgid "Preloading Strategy"
msgstr ""

#: src/interpolation/how-to-bind.md:3
msgid ""
"```html\n"
"<div id={{myId}}></div > == <div [id]=\"myId\"></div >\n"
"```"
msgstr ""

#: src/interpolation/how-to-customize-interpolation.md:1
msgid "How to customize Component Interpolation ?"
msgstr ""

#: src/interpolation/how-to-customize-interpolation.md:3
msgid ""
"```typescript\n"
"import { Component } from '@angular/core';\n"
"\n"
"@Component({\n"
"  selector: 'my-app',\n"
"  template: `<p>name</p>`,\n"
"  styleUrls: ['./app.component.css'],\n"
"  interpolation: ['', ''],\n"
"})\n"
"export class AppComponent {\n"
"  name = 'Angular';\n"
"}\n"
"\n"
"```"
msgstr ""

#: src/interpolation/how-to-customize-interpolation.md:17
msgid ""
"```admonish note\n"
"If you need to display \"{{\" \"}}\" characters in template you can attach a "
"property to your component without customize interpolation\n"
"```"
msgstr ""

#: src/interpolation/how-to-customize-interpolation.md:21
msgid ""
"```admonish tldr\n"
" Have fun with emoji customization [link](https://unicode.org/emoji/charts/"
"full-emoji-list.html)\n"
"```"
msgstr ""

#: src/interpolation/how-to-customize-interpolation.md:28
#: src/renderer/how-to-create_comment.md:27
#: src/ng-template/ng-template-with-ngIf.md:30
#: src/ng-template/ng-template-outlet.md:35
#: src/ng-template/ng-template-outlet-with-context.md:21
#: src/ng-template/ng-template-with-viewChild-contentChild.md:76
msgid "["
msgstr ""

#: src/interpolation/how-to-customize-interpolation.md:28
#: src/renderer/how-to-create_comment.md:27
#: src/ng-template/ng-template-with-ngIf.md:30
#: src/ng-template/ng-template-outlet.md:35
#: src/ng-template/ng-template-outlet-with-context.md:21
#: src/ng-template/ng-template-with-viewChild-contentChild.md:76
msgid "]()"
msgstr ""

#: src/renderer/index.md:1
msgid ""
"Renderer2 ![](https://img.shields.io/static/v1?"
"label=&message=CLASS&color=blue)"
msgstr ""

#: src/renderer/how-to-create_comment.md:4
msgid ""
"```typescript\n"
"import { Component, ElementRef, Renderer2, VERSION } from '@angular/core';\n"
"\n"
"@Component({\n"
"  selector: 'my-app',\n"
"  templateUrl: './app.component.html',\n"
"  styleUrls: ['./app.component.css'],\n"
"})\n"
"export class AppComponent {\n"
"  name = 'Angular ' + VERSION.major;\n"
"  constructor(private renderer: Renderer2, private elRef: ElementRef) {\n"
"    const comment = this.renderer.createComment('My Comment');\n"
"    this.renderer.appendChild(elRef.nativeElement, comment);\n"
"  }\n"
"}\n"
"\n"
"\n"
"```"
msgstr ""

#: src/renderer/how-to-create_comment.md:23
msgid ""
"```admonish tldr\n"
"It's use by Angular internal rendering proccess that's why comment appear "
"when we use *ngIf or *ngFor \n"
"```"
msgstr ""

#: src/ng-template/index.md:2
msgid "Definitions"
msgstr ""

#: src/ng-template/index.md:3
msgid "ng-template"
msgstr ""

#: src/ng-template/index.md:4
msgid "The \\`"
msgstr ""

#: src/ng-template/index.md:4
msgid ""
" is an Angular element, which contains the template. A template is an HTML "
"snippet. The template does not render itself on DOM."
msgstr ""

#: src/ng-template/index.md:6
msgid "ng-template-outlet"
msgstr ""

#: src/ng-template/index.md:7
msgid ""
"The `ngTemplateOutlet` directive allows you to dynamically render templates "
"in your Angular components, which can be very useful for creating reusable "
"and flexible UI components."
msgstr ""

#: src/ng-template/index.md:9
msgid "ViewChild/ViewChildren and ContentChild/ContentChildren"
msgstr ""

#: src/ng-template/index.md:10
msgid ""
"`ViewChild` and `ViewChildren` are used to access the DOM elements or "
"directives from a component template. `ContentChild` and `ContentChildren` "
"are used to access the DOM elements or directives from the content of a "
"component."
msgstr ""

#: src/ng-template/index.md:13
msgid "Table of contents"
msgstr ""

#: src/ng-template/index.md:14
msgid ""
"[How to use ng-template with ngIf directive ? ](./ng-template-with-ngIf.md)"
msgstr ""

#: src/ng-template/index.md:15
msgid "[How to use ngTemplateOutlet ?](./ng-template-outlet.md)"
msgstr ""

#: src/ng-template/index.md:16
msgid ""
"[How to use ngTemplateOutlet with context ?](./ng-template-outlet-with-"
"context.md)"
msgstr ""

#: src/ng-template/index.md:17
msgid ""
"[How to use ng-template with ViewChild/ViewChildren and ContentChild/"
"ContentChildren ?](./ng-template-with-viewChild-contentChild.md)"
msgstr ""

#: src/ng-template/ng-template-with-ngIf.md:1
msgid "The ng-template with ngIf directive"
msgstr ""

#: src/ng-template/ng-template-with-ngIf.md:3
msgid ""
"```admonish note\n"
"`<ng-template>` in Angular is a angular `element` used to define and render "
"content dynamically within components. It's a versatile tool for creating "
"reusable templates, handling rendering logic, and improving code "
"organization by separating content from its presentation, commonly used with "
"structural directives like `*ngIf`, `*ngFor`, and `*ngSwitch`.\n"
"```"
msgstr ""

#: src/ng-template/ng-template-with-ngIf.md:7
msgid ""
"```html\n"
"<div *ngIf=\"items else loading\">\n"
"  ... \n"
"</div>\n"
"\n"
"<ng-template #loading>\n"
"    <div>Loading...</div>\n"
"</ng-template>\n"
"```"
msgstr ""

#: src/ng-template/ng-template-with-ngIf.md:17
msgid "or "
msgstr ""

#: src/ng-template/ng-template-with-ngIf.md:19
msgid ""
"```html\n"
"<ng-template [ngIf]=\"items\" [ngIfElse]=\"loading\">\n"
"   <div class=\"lessons-list\">\n"
"     ... \n"
"   </div>\n"
"</ng-template>\n"
"\n"
"<ng-template #loading>\n"
"    <div>Loading...</div>\n"
"</ng-template>\n"
"```"
msgstr ""

#: src/ng-template/ng-template-outlet.md:3
#: src/ng-template/ng-template-outlet-with-context.md:3
msgid ""
"```admonish note\n"
"`ngTemplateOutlet` allows you to dynamically render templates in your "
"Angular components, which can be very useful for creating reusable and "
"flexible UI components.\n"
"```"
msgstr ""

#: src/ng-template/ng-template-outlet.md:7
msgid ""
"```html\n"
"<div>you can see me</div>\n"
"\n"
"<ng-template #myTemplate>\n"
"    <div>you can't see me </div>\n"
"</ng-template>\n"
"\n"
"```"
msgstr ""

#: src/ng-template/ng-template-outlet.md:17
msgid ""
"```html\n"
"<div>you can see me</div>\n"
"\n"
"<ng-template #myTemplate>\n"
"    <div>you can see me if you used ngTemplateOutlet</div>\n"
"</ng-template>\n"
"\n"
"<ng-container *ngTemplateOutlet=\"myTemplate\">\n"
"    <p>I won't be displayed</p>\n"
"</ng-container>\n"
"\n"
"or \n"
"\n"
"<ng-container [ngTemplateOutlet]=\"myTemplate\">\n"
"    <p>I won't be displayed</p>\n"
"</ng-container>\n"
"```"
msgstr ""

#: src/ng-template/ng-template-outlet-with-context.md:7
msgid ""
"```html\n"
"<ng-template #myTemplate let-name=\"name\">\n"
"    <div>hello {{name}}</div>\n"
"</ng-template>\n"
"\n"
"<ng-container *ngTemplateOutlet=\"myTemplate; context: {name: 'Angular "
"CookBook'}\">\n"
"</ng-container>\n"
"\n"
"or\n"
"\n"
"<ng-container "
"[ngTemplateOutlet]=\"myTemplate\" [ngTemplateOutletContext]=\"{name: "
"'Angular CookBook'}\">\n"
"</ng-container>\n"
"```"
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:1
msgid ""
"ng-template with ViewChild/ViewChildren and ContentChild/ContentChildren ?"
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:2
msgid ""
"```admonish note\n"
"In Angular, ViewChild, ViewChildren, ContentChild, and ContentChildren are "
"used for component communication. They enable a parent component to access "
"its child components.\n"
"```"
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:7
msgid "ViewChild and ViewChildren"
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:9
msgid ""
"```admonish note\n"
"`ViewChild` is used to access a single child component or a DOM element, "
"while `ViewChildren` is used when there are multiple child components or DOM "
"elements of the same type. \n"
"```"
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:14
msgid ""
"```typescript\n"
"@Component({\n"
"  selector: 'hello',\n"
"  template: `<h1>Hello {{name}}!</h1>`, \n"
"  styles: [`h1 { font-family: Lato; }`],\n"
"  standalone: true\n"
"})\n"
"export class HelloComponent  {\n"
"  @Input() name: string;\n"
"}\n"
"```"
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:26
msgid "`ViewChild` can be used to access the `HelloComponent` instance:"
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:28
msgid ""
"```typescript\n"
"import { Component, ViewChild, AfterViewInit } from '@angular/core';\n"
"\n"
"@Component({\n"
"  selector: 'my-app',\n"
"  templateUrl: './app.component.html',\n"
"  styleUrls: [ './app.component.css' ], \n"
"  standalone: true,\n"
"  imports: [HelloComponent]\n"
"})\n"
"export class AppComponent implements AfterViewInit {\n"
"  name = 'Angular';\n"
"  @ViewChild(HelloComponent, {static: false}) hello: HelloComponent;\n"
"  ngAfterViewInit() {\n"
"    console.log('Hello ', this.hello.name); \n"
"  }\n"
"}\n"
"```"
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:47
msgid ""
"In this example, `ViewChild` is used to get a reference to `HelloComponent` "
"and access its `name` property ."
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:50
msgid "`ViewChildren` can be used in a similar way:"
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:52
msgid ""
"```typescript\n"
"import { Component, ViewChildren, AfterViewInit, QueryList } from '@angular/"
"core';\n"
"import { HelloComponent } from './hello.component';\n"
"\n"
"@Component({\n"
"  selector: 'my-app',\n"
"  templateUrl: './app.component.html',\n"
"  styleUrls: [ './app.component.css' ],\n"
"  standalone: true,\n"
"  imports: [HelloComponent]\n"
"})\n"
"export class AppComponent implements AfterViewInit {\n"
"  name = 'Angular';\n"
"  @ViewChildren(HelloComponent) hellos: QueryList<any>;\n"
"  ngAfterViewInit() {\n"
"     this.hellos.forEach(hello => console.log(hello));\n"
"  }\n"
"}\n"
"```"
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:73
msgid ""
"In this case, `ViewChildren` returns a `QueryList` of `HelloComponent` "
"instances, and in `ngAfterViewInit`, we iterate over this list and log each "
"instance."
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:78
msgid "ContentChild and ContentChildren"
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:80
msgid ""
"```admonish note\n"
"`ContentChild` and `ContentChildren` are similar to `ViewChild` and "
"`ViewChildren`, but they are used to access projected content (content that "
"is passed from a parent component to a child component through `ng-"
"content`).\n"
"```"
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:83
msgid "Here's an example of how to use `ContentChild`:"
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:85
msgid ""
"```typescript\n"
"import { Component } from '@angular/core';\n"
"\n"
"@Component({\n"
"  selector: 'card',\n"
"  template: `\n"
"    <div class=\"card\">\n"
"      <ng-content select=\"header\"></ng-content>\n"
"      <ng-content select=\"content\"></ng-content>\n"
"      <ng-content select=\"footer\"></ng-content>\n"
"    </div> \n"
"  `,\n"
"  styles: [\n"
"    ` .card { min- width: 280px;  margin: 5px;  float:left  } \n"
"    `\n"
"  ]\n"
"})\n"
"export class CardComponent {\n"
"  @ContentChild('header') cardContentHeader: ElementRef;\n"
"}\n"
"```"
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:106
msgid ""
"In this case, `ContentChild` is used to get a reference to the projected "
"`header` content."
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:108
msgid ""
"`ContentChildren` can be used to get a list of projected content elements:"
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:110
msgid ""
"```typescript\n"
"import { Component, ContentChildren, ElementRef, QueryList } from '@angular/"
"core';\n"
"\n"
"@Component({\n"
"  selector: 'my-component',\n"
"  template: `...`\n"
"})\n"
"export class MyComponent {\n"
"  @ContentChildren('item') items: QueryList<ElementRef>;\n"
"}\n"
"```"
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:121
msgid ""
"In this example, `ContentChildren` is used to get a `QueryList` of projected "
"content elements with the template reference variable 'item'."
msgstr ""

#: src/ng-template/ng-template-with-viewChild-contentChild.md:123
msgid ""
"In conclusion, `ViewChild` and `ViewChildren` are used to access child "
"components and DOM elements directly added in the component's template. In "
"contrast, `ContentChild` and `ContentChildren` are used to access projected "
"content added in the component through `ng-content`."
msgstr ""

#: src/awesome-angular/awesome_angular.md:2
msgid "![Awesome Angular](./awesome-angular.png)"
msgstr ""

#: src/contributors.md:3
msgid "[Pierre Ndlec](https://www.linkedin.com/in/pierrenedelec-angular/) "
msgstr ""
